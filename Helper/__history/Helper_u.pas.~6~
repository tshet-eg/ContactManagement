unit Helper_u;

interface

uses System.SysUtils, Generics.Collections, System.Classes;

type
  THelper = class
    FLastId: integer;
    function GenerateID: integer;
    procedure GetLastId;
    function LoadTxtToList: TList<TArray<string>>;
  end;

var
  tHelperObj: THelper;

implementation

{ THelper }

function THelper.GenerateID: integer;
begin
  GetLastId;
  inc(FLastId);
  Result := FLastId;
end;

procedure THelper.GetLastId;
var
  vContactFile, vDeletedFile: TextFile;
  vFileLine, vLastLine: string;
  vPos, vLastId, vLastDeletedId: integer;
begin
  FLastId := 0;
  AssignFile(vContactFile, 'ContactsLog.txt');
  Reset(vContactFile);
  try
    while not Eof(vContactFile) do
    begin
      Readln(vContactFile, vFileLine);
      vLastLine := vFileLine;
    end;
  finally
    CloseFile(vContactFile);
  end;
  vPos := pos(',', vLastLine);
  vLastId := strToInt(Copy(vLastLine, 1, vPos - 1));

  AssignFile(vDeletedFile, 'DeletedContacts.txt');
  Reset(vDeletedFile);
  try
    while not Eof(vDeletedFile) do
    begin
      Readln(vDeletedFile, vFileLine);
      vLastLine := vFileLine;
    end;
  finally
    CloseFile(vDeletedFile);
  end;
  vPos := pos(',', vLastLine);
  vLastDeletedId := strToInt(Copy(vLastLine, 1, vPos - 1));
  if vLastId > vLastDeletedId then
    FLastId := vLastId
  else
    FLastId := vLastDeletedId;
end;

function THelper.LoadTxtToList: TList<TArray<string>>;
var
  vFile: TStringList;
  vFileRow: string;
  vContactRowArr: TArray<string>;
  vContactsList: TList<TArray<string>>;
begin
  vFile := TStringList.Create;
  try
    if FileExists('ContactsLog.txt') then
      vFile.LoadFromFile('ContactsLog.txt');
    for var vRow := 0 to vFile.Count - 1 do
    begin
      vFileRow := vFile[vRow];
      vContactRowArr := vFileRow.Split([',']);
      vContactsList.Add(vContactRowArr);
    end;
  finally
    vFile.Free;
  end;
  Result := vContactsList;
end;

end.
